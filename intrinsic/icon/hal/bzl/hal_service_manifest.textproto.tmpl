# Copyright 2023 Intrinsic Innovation LLC

{{- .PartialManifest -}}
service_def {
  supports_service_state: true
  {{- if .ProvidesServiceInspection }}
  service_inspection_config {
    data_proto_message_full_name: "intrinsic_proto.icon.v1.HardwareModuleInspectionData"
  }
  {{- end }}
  {{- range .ServiceProtoPrefixes }}
  service_proto_prefixes: "{{ . }}"
  {{- end }}
  {{- if .Image }}
  real_spec {
    image {
      archive_filename: "{{ .Image }}"
      settings {
        {{- if .RunningEthercatOss }}
        volume_mounts {
          name: "etherlab"
          mount_path: "/dev/EtherCAT0"
        }
        {{- end }}
        volume_mounts {
          name: "intrinsic-icon"
          mount_path: "{{ .IntrinsicIconPath }}"
        }
        security_context {
          {{- if .RunningEthercatOss }}
          privileged: true # Required to access Etherlab device file /dev/EtherCAT0.
          {{- end }}
          posix_capabilities {
            add: POSIX_CAPABILITY_SYS_NICE # Required for realtime execution.
            add: POSIX_CAPABILITY_IPC_LOCK # Lock memory (mlock(2), mlockall(2), mmap(2), shmctl(2)).
          }
        }
        {{- if .RequiresAtemsys }}
        resource_requirements {
          limits {
            key: "atemsys.acontis.com/ecat-driver"
            value: "1"
          }
        }
        {{- end }}
        requires_rtpc_node: {{ .RequiresRTPC }}
      }
    }
    settings {
      host_network: true
      {{- if .RunningEthercatOss }}
      volumes {
        name: "etherlab"
        host_path {
          path: "/dev/EtherCAT0"
        }
      }
      {{- end }}
      volumes {
        name: "intrinsic-icon"
        host_path {
          path: "{{ .IntrinsicIconPath }}"
        }
      }
    }
  }
  {{- end }}
  {{- if .ImageSim }}
  sim_spec {
    image {
      archive_filename: "{{ .ImageSim }}"
      settings {
        volume_mounts {
          name: "intrinsic-icon"
          mount_path: "{{ .IntrinsicIconPath }}"
        }
        security_context {
          # Required to use shared memory mount shared memory segments.
          posix_capabilities {
            add: POSIX_CAPABILITY_IPC_LOCK # Lock memory (mlock(2), mlockall(2), mmap(2), shmctl(2)).
          }
        }
      }
    }
    settings {
      volumes {
        name: "intrinsic-icon"
        host_path {
          path: "{{ .IntrinsicIconPath }}"
        }
      }
    }
  }
  {{- end }}
}