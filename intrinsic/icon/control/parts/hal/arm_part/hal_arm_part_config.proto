// Copyright 2023 Intrinsic Innovation LLC

syntax = "proto3";

package intrinsic_proto.icon;

import "intrinsic/icon/control/parts/hal/hal_part_config.proto";
import "intrinsic/icon/control/parts/proto/mode_of_safe_operation_limits_config.proto";
import "intrinsic/icon/proto/joint_position_pid_torque_controller_config.proto";
import "intrinsic/icon/proto/linear_joint_acceleration_filter_config.proto";

// Config specialization for a HAL arm part.
// The config is assigning a hardware interface for each required feature
// interface.
// Next ID: 26
message HalArmPartConfig {
  HardwareInterface joint_position_command = 1;
  HardwareInterface joint_commanded_position = 25;
  HardwareInterface joint_velocity_command = 2;
  HardwareInterface joint_torque_command = 3;
  HardwareInterface joint_position_state = 4;
  HardwareInterface joint_velocity_state = 5;
  HardwareInterface joint_acceleration_state = 6;
  HardwareInterface joint_torque_state = 7;
  HardwareInterface process_wrench_command = 18;
  HardwareInterface hand_guiding_command = 19;
  // If present, then the control mode state feature interface will be available
  // and provide the current control mode of the arm.
  HardwareInterface control_mode_state = 20;
  HardwareInterface payload_command = 21;
  // `payload_state` requires a `payload_command` to be present.
  // `payload_command` can be used independently.
  HardwareInterface payload_state = 22;
  // The system limits are written to this hardware interface.
  HardwareInterface joint_system_limits = 23;

  // If present, the kinematics model name needs to correspond to one of the
  // kinematics models available via KinematicsService. Which models are
  // available is determined by the ServicesConfig in the IconMainConfig.
  //
  // This is only used if no `hardware_resource_name` is specified in the
  // RealtimePartConfig.
  optional string kinematics_model_name = 10;

  // If present, the dynamics model name needs to correspond to one of the
  // dynamics models available via DynamicsService. Which models are
  // available is determined by the ServicesConfig in the IconMainConfig.
  //
  // If omitted, the HalArmPart does not offer the Dynamics Feature
  // Interface.
  optional string dynamics_model_name = 11;

  // If present, create an estimated acceleration state feature interface.
  //   Preconditions:
  // * `joint_position_state` hardware interface is available
  // * `joint_velocity_state` hardware interface is available
  // * `joint_acceleration_state` hardware interface is *not* available
  optional intrinsic_proto.icon.LinearJointAccelerationFilterConfig
      linear_joint_acceleration_filter_config = 12;

  // If present, register a joint position command feature interface. This is
  // mapped to the `joint_torque_command` hardware interface via a per-joint
  // control law parameterized by the config specified here.
  //  Preconditions:
  // * `joint_torque_command` hardware interface is available
  // * `joint_position_state` hardware interface is available
  // * `joint_velocity_state` hardware interface is available
  // * `joint_position_command` hardware interface is *not* available
  optional intrinsic_proto.icon.ArmPositionPidTorqueControllerConfig
      arm_position_pid_torque_controller_config = 13;

  // If present, and `true` then the part will be configured to perform self
  // collision checking. This requires the availability of a WorldService and
  // AssemblyService.
  optional bool check_collisions = 14;

  // If present this configuration determines modified limits (joint and
  // Cartesian), which are to be used under specific modes of safe operation as
  // determined by the part SafetyStatus. Otherwise the limits determined from
  // the hardware interfaces will be used for all modes of operation.
  optional ModeOfSafeOperationLimitsConfig
      mode_of_safe_operation_limits_config = 15;

  // If present, then the joint velocity state feature interface velocity
  // estimate values will be low-pass filtered using a 2nd Order Butterworth
  // filter with the configured cutoff frequency. This is applied to both the
  // velocity state from the hardware interface and the velocity state
  // calculated from the position state.
  optional double velocity_filter_cutoff_frequency = 16;

  // If present, then the joint velocity state feature interface will be
  // configured to calculate the velocity state from the position state. Only
  // one of joint_velocity_state and calculate_velocity_state_from_position can
  // be set.
  optional bool calculate_velocity_state_from_position = 24;

  reserved 8, 9, 17;
}
