// Copyright 2023 Intrinsic Innovation LLC

syntax = "proto3";

package intrinsic_proto.perception.v1;

import "google/protobuf/duration.proto";
import "intrinsic/math/proto/pose.proto";
import "intrinsic/perception/proto/v1/camera_config.proto";
import "intrinsic/perception/proto/v1/camera_identifier.proto";
import "intrinsic/perception/proto/v1/camera_params.proto";
import "intrinsic/perception/proto/v1/camera_settings.proto";
import "intrinsic/perception/proto/v1/capture_result.proto";
import "intrinsic/perception/proto/v1/dimensions.proto";
import "intrinsic/perception/proto/v1/image_buffer.proto";
import "intrinsic/perception/proto/v1/post_processing.proto";
import "intrinsic/platform/pubsub/storage_location.proto";

service CameraService {
  // Returns all available cameras connected on the server side.
  rpc ListAvailableCameras(ListAvailableCamerasRequest)
      returns (ListAvailableCamerasResponse) {}

  // Describes the camera and its sensors. Enumerates connected sensors.
  rpc DescribeCamera(DescribeCameraRequest) returns (DescribeCameraResponse) {}

  // Captures image data from the requested sensors of the specified camera.
  rpc Capture(CaptureRequest) returns (CaptureResponse) {
  }

  // Reads and returns the access mode of a specific setting from a camera.
  // The function returns an error if the camera is unknown.
  rpc ReadCameraSettingAccess(ReadCameraSettingAccessRequest)
      returns (ReadCameraSettingAccessResponse) {}

  // Read the properties of the user specified camera and setting.
  // The function returns an error if the camera is unknown or if the setting is
  // not supported. If specific properties of a setting are not supported, they
  // are not added to the result. The function only returns existing properties
  // and triggers no errors for non-existing properties as these are optional to
  // be implemented by the camera vendors.
  rpc ReadCameraSettingProperties(ReadCameraSettingPropertiesRequest)
      returns (ReadCameraSettingPropertiesResponse) {}

  // Reads and returns the current value of a specific setting from a camera.
  // The function returns an error if the camera is unknown or if the setting is
  // not supported.
  rpc ReadCameraSetting(ReadCameraSettingRequest)
      returns (ReadCameraSettingResponse) {}

  // Update the value of a specific camera setting.
  // The function returns an error if the camera is unknown or if the setting is
  // not supported.
  // Note: When updating camera parameters, beware that the modifications will
  //   apply to all instances. I.e. it will also affect all other clients who
  //   are using the same camera.
  rpc UpdateCameraSetting(UpdateCameraSettingRequest)
      returns (UpdateCameraSettingResponse) {}
}

// DEPRECATED: Use CameraService instead.
service CameraServer {
  option deprecated = true;

  // See CameraService.ListAvailableCameras.
  rpc ListAvailableCameras(ListAvailableCamerasRequest)
      returns (ListAvailableCamerasResponse) {}

  // See CameraService.DescribeCamera.
  rpc DescribeCamera(DescribeCameraRequest) returns (DescribeCameraResponse) {}

  // See CameraService.Capture.
  rpc Capture(CaptureRequest) returns (CaptureResponse) {
  }

  // See CameraService.ReadCameraSettingAccess.
  rpc ReadCameraSettingAccess(ReadCameraSettingAccessRequest)
      returns (ReadCameraSettingAccessResponse) {}

  // See CameraService.ReadCameraSettingProperties.
  rpc ReadCameraSettingProperties(ReadCameraSettingPropertiesRequest)
      returns (ReadCameraSettingPropertiesResponse) {}

  // See CameraService.ReadCameraSetting.
  rpc ReadCameraSetting(ReadCameraSettingRequest)
      returns (ReadCameraSettingResponse) {}

  // See CameraService.UpdateCameraSetting.
  rpc UpdateCameraSetting(UpdateCameraSettingRequest)
      returns (UpdateCameraSettingResponse) {}
}

// In the future, this proto may contain a filter property to specify which
// cameras should be returned by the function. This would allow us to
// differentiate between physical cameras connected to the system and cameras
// which are already instantiated on the server side. In addition one could add
// filtering options to only list cameras of a specific driver.
message ListAvailableCamerasRequest {}

message ListAvailableCamerasResponse {
  // A list of unique camera identifiers. These can be used to create a
  // CameraConfig which is required during camera creation.
  repeated CameraIdentifier camera_identifiers = 1;
}

message CaptureRequest {
  // The configuration of the camera from which images are to be captured from.
  CameraConfig camera_config = 1;

  // The timeout which is used for retrieving frames from the underlying driver
  // implementation. If this timeout is implemented by the underlying camera
  // driver, it will not spend more than the specified time when waiting for new
  // frames.
  // The timeout should be greater than the combined exposure and processing
  // time. Processing times can be roughly estimated as a value between 10 - 50
  // ms. The timeout just serves as an upper limit to prevent blocking calls
  // within the camera driver. In case of intermittent network errors users can
  // try to increase the timeout. The default timeout (if unspecified) of 500 ms
  // works well in common setups.
  google.protobuf.Duration timeout = 2;

  // Optional. Request data only for the following sensor ids (i.e. transmit
  // mask). Empty returns all sensor images.
  repeated int64 sensor_ids = 3;

  // Additional post processing options for each sensor. If present, sensor post
  // processing options will override the global post processing options.
  map<int64, SensorImagePostProcessing> post_processing_by_sensor_id = 4;

  // If set the capture result will be stored in the specified key value store
  // location, which will also be returned instead of the capture result itself.
  optional kvstore.StorageLocation capture_result_location = 5;
}

message CaptureResponse {
  oneof response {
    CaptureResult capture_result = 1;
    kvstore.StorageLocation capture_result_location = 2;
  }
}

message ReadCameraSettingAccessRequest {
  // The identifier of the camera from which setting access is read.
  CameraIdentifier camera_identifier = 1;
  // The setting name.
  // The setting name must be defined by the Standard Feature Naming Conventions
  // (SFNC) which is part of the GenICam standard.
  string name = 2;
}

message ReadCameraSettingAccessResponse {
  // The access mode of a specific setting.
  CameraSettingAccess access = 1;
}

message ReadCameraSettingPropertiesRequest {
  // The identifier of the camera from which setting properties are read.
  CameraIdentifier camera_identifier = 1;
  // The setting name.
  // The setting name must be defined by the Standard Feature Naming Conventions
  // (SFNC) which is part of the GenICam standard.
  string name = 2;
}

message ReadCameraSettingPropertiesResponse {
  // The properties of a specific setting.
  // For numeric properties (integer and float), these include the valid range
  // of parameters, their increment and their unit. For enumerations the
  // properties contain the values (as strings) which can be set.
  CameraSettingProperties properties = 1;
}

message ReadCameraSettingRequest {
  // The identifier of the camera from which the setting is read.
  CameraIdentifier camera_identifier = 1;
  // The setting name.
  // The setting name must be defined by the Standard Feature Naming Conventions
  // (SFNC) which is part of the GenICam standard.
  string name = 2;
}

message ReadCameraSettingResponse {
  // The current values of a specific setting.
  // The following types of settings are supported int64, double, bool, string
  // or an enum value.
  CameraSetting setting = 1;
}

message UpdateCameraSettingRequest {
  // The identifier of the camera on which settings are updated.
  CameraIdentifier camera_identifier = 1;
  // The settings values which will be used to for a parameter update.
  CameraSetting setting = 2;
}

// The response for setting camera parameters. This is currently a  mere
// placeholder for future response values.
message UpdateCameraSettingResponse {}

message DescribeCameraRequest {
  // The identifier of the camera that is to be described.
  CameraIdentifier camera_identifier = 1;
}

message DescribeCameraResponse {
  repeated SensorInformation sensors = 1;
}

message SensorInformation {
  // ComponentIDValue or 0 for Genicam, sensor number for other cameras (e.g.
  // IPS PU)
  int64 id = 1;
  // A human readable display name.
  string display_name = 2;
  // Sensor camera parameters from factory
  optional CameraParams factory_camera_params = 3;
  // Transforms the sensor data into the reference coordinate system of the
  // camera.
  optional intrinsic_proto.Pose camera_t_sensor = 4;
  // Supported pixel types
  repeated PixelType supported_pixel_types = 5;
  // Dimensions of sensor output
  Dimensions dimensions = 6;
  // Is sensor currently disabled
  bool disabled = 7;
}
