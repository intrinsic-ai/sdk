// Copyright 2023 Intrinsic Innovation LLC

syntax = "proto3";

package intrinsic_proto.executive;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "intrinsic/executive/proto/behavior_tree.proto";
import "intrinsic/executive/proto/executive_execution_mode.proto";
import "intrinsic/logging/proto/context.proto";
import "intrinsic/util/status/extended_status.proto";

message RunMetadata {
  // Describes the overall state of the Operation.
  enum State {
    UNSPECIFIED = 0;  // Default value, will not occur on retrieval.
    ACCEPTED = 10;    // Operation has been loaded successfully.
    PREPARING = 20;   // Operation is preparing to start execution.
    RUNNING = 30;     // Operation is currently executing.
    SUSPENDING = 40;  // Operation is waiting for in-flight actions to complete.
    SUSPENDED = 50;   // Operation has been paused (and can be resumed),
    CANCELING = 60;   // Operation is waiting for cancellation to finish.
    SUCCEEDED = 70;   // Operation has finished execution successfully.
    FAILED = 80;      // Operation has failed to execute.
    CANCELED = 90;    // Operation was canceled as requested.
  }
  State operation_state = 30;

  oneof runnable_type {
    BehaviorTree behavior_tree = 1;
  }

  oneof state_type {
    // Deprecated: Use operation_state instead of behavior_tree_state.
    BehaviorTree.State behavior_tree_state = 10 [deprecated = true];
  }

  string world_id = 19;

  // These fields will be initialized when starting a behavior tree (not
  // immediately when creating it).
  ExecutionMode execution_mode = 20;
  SimulationMode simulation_mode = 21;

  // Tracing information for retrieval of tracing info. The feature is only
  // available internally for Intrinsic at this point in time.
  message TracingInfo {
    // Defines how skill traces are handled within a behavior tree trace.
    enum SkillTraceHandling {
      SKILL_TRACES_UNSPECIFIED = 0;

      // Leave skill traces as individual traces and provide links
      // to these as attributes in task nodes.
      SKILL_TRACES_LINK = 1;

      // Embed skill traces as part of the current behavior tree trace.
      SKILL_TRACES_EMBED = 2;
    }

    string trace_id = 1;
    string trace_url = 2;
    SkillTraceHandling skill_trace_handling = 3;
  }
  // The field is initialized when starting a behavior tree (not immediately
  // when creating it).
  TracingInfo tracing_info = 22;

  // These fields are set, if the operation is configured to execute only a
  // specific node of a sub-behavior tree of the loaded behavior tree.
  optional string start_tree_id = 24;
  optional uint32 start_node_id = 25;

  // These fields are set and updated after the operation is started.
  // Time the operation was started in UTC.
  optional google.protobuf.Timestamp start_time = 26;

  // Time the operation was actively executing, e.g., excluding preparing to
  // start, being suspended or done.
  optional google.protobuf.Duration execution_time = 27;

  // This context is set when getting the operation info via the service.  It
  // contains the session ID and possibly the ID of the current runnable. It
  // will *not* contain an action ID. The field is *not* set for logged
  // executive states (which already are associated with a context anyway). The
  // IDs can be used to query other relevant data.
  optional intrinsic_proto.data_logger.Context log_context = 23;

  // This contains diagnostics information for the current operation. These are
  // not errors, but warnings and informational messages. After a successful
  // call to CreateOperation this may generate diagnostics that could be
  // reported to the user.
  optional intrinsic_proto.status.ExtendedStatus diagnostics = 28;
}
