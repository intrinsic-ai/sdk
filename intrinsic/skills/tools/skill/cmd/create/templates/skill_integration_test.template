{{/*
Copyright 2023 Intrinsic Innovation LLC
*/ -}}

#!/usr/bin/env python3

import unittest

from intrinsic.solutions import behavior_tree as bt
from intrinsic.solutions import deployments


class Test{{.SkillNameUpperCamelCase}}(unittest.TestCase):

  @classmethod
  def setUpClass(cls):
    cls.solution = deployments.connect_to_selected_solution()
    input("""Please do these manual steps:
    1. Install the skill {{.SkillPackageName}}.{{.SkillNameSnakeCase}} into the solution
    2. Add all assets the skill needs to the scene
    \nHit [Enter] when ready""")
    print("Starting testing...")
    # Update the list of skills to see the newly installed skill.
    cls.solution.skills.update()
    cls.skill_under_test = cls.solution.skills.{{.SkillPackageName}}.{{.SkillNameSnakeCase}}

  def test_execute_with_other_skills_success(self):
    # Create an instance of the skills with specific parameters.
    skill = self.skill_under_test(
      text = "Hello integration test!"
    )

    # Create a behavior tree with all skills needed to test {{.SkillNameUpperCamelCase}}
    tree = bt.BehaviorTree(
        name="{{.SkillNameUpperCamelCase}} Integration Test",
        root=bt.Sequence([
          bt.Task(action=skill, name="Skill Under Test"),
        ]
      ),
    )
    # To fail the test, let the executive raise an exception if the skill fails to execute.
    self.solution.executive.run(tree)


if __name__ == '__main__':
    unittest.main()
