// Copyright 2023 Intrinsic Innovation LLC

syntax = "proto3";

package intrinsic_proto.skills;

import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "intrinsic/assets/proto/documentation.proto";
import "intrinsic/assets/proto/id.proto";
import "intrinsic/assets/proto/status_spec.proto";
import "intrinsic/assets/proto/vendor.proto";
import "intrinsic/skills/proto/equipment.proto";

message PythonServiceConfig {
  // The module where the skill's create function is declared.
  string skill_module = 1;

  // The module where the skill's proto message schemas are declared.
  string proto_module = 2;

  // The symbol for the method to create the skill.
  // This is commonly the skill's constructor. For example,
  // for a skill declared in:
  // intrinsic/skills/examples/my_skill.py
  //
  // class MySkill(skl.Skill):
  //   def __init__(self):
  //     pass
  //
  // this field should be set to:
  // "intrinsic.skills.examples.my_skill.MySkill" to use the class's
  // constructor to create the skill.
  string create_skill = 3;
}

message CcServiceConfig {
  // The create skill method symbol. This is the fully qualified name of the
  // method that can be used to create a skill. It must be convertible to a
  // std::function<absl::StatusOr<std::unique_ptr<SkillInterface>>()>. The
  // method must be declared in the header file for a skill library provided to
  // the cc_skill() build rule as the skill dependency.
  //
  // This method is used at build time to generate the skill service main.
  //
  // For the NoOpSkill example with:
  //
  // namespace intrinsic::skills {
  // class NoOpSkill {
  //  public:
  //   static std::unique_ptr<SkillInterface> CreateSkill();
  //   // ...
  // };
  // }  // namespace intrinsic::skills
  //
  // The Create() method should be registered in the manifest.textproto as:
  //
  // create_skill: "::intrinsic::skills::NoOpSkill::CreateSkill"
  //
  // The generated skill service will create skills by invoking this method.
  string create_skill = 1;
}

message ParameterMetadata {
  // The fully-qualified name of the Protobuf message
  string message_full_name = 1;

  // The default value used by the skill for this
  optional google.protobuf.Any default_value = 2;
}

message ReturnMetadata {
  // The fully-qualified name of the Protobuf message
  string message_full_name = 1;
}

message PubTopicMetadata {
  // Used to construct a unique topic name for publishing. Instances of this
  // skill will publish to topic /skill/<skill_name>/<instance_id>/<data_id>.
  string data_id = 1;

  // Optional documentation that can be shown to users of the skill. It may
  // include information about the data published on this topic.
  string description = 2;

  // The published proto's full message name.
  string message_full_name = 3;
}

message Options {
  // Indicates whether the skill supports cooperative cancellation during
  // execution. True if the skill supports cancellation, false otherwise.
  bool supports_cancellation = 1;

  // Sets the cancellation ready time for the skill during execution.
  //
  // During execution, if the skill is cancelled, its ExecuteContext waits for
  // at most this timeout duration for the skill to have called
  // Ready() (C++) or ready() (Python) before raising a timeout error.
  //
  // If this timeout is not specified, then the default used by the skill
  // service is 30 seconds.
  google.protobuf.Duration cancellation_ready_timeout = 2;

  // Sets the execution timeout for the skill.
  //
  // If this timeout is not specified, then the default used by the skill
  // service is 180 seconds.
  google.protobuf.Duration execution_timeout = 3;

  // Language-specific configuration options.
  oneof language_specific_options {
    PythonServiceConfig python_config = 10;
    CcServiceConfig cc_config = 11;
  }
}

message Dependencies {
  // Required interfaces that Services must satisfy for the Skill.
  map<string, ResourceSelector> required_equipment = 1;
}

message ExtendedDocumentation {
  // Prerequisites for a skill refer to the necessary conditions and
  // requirements that must be met for the skill to function properly.
  // These can include specific hardware components like sensors or
  // controllers, initial calibration and setup procedures, software
  // dependencies, network configurations, required permissions and access
  // and/or relevant configuration files.
  string prerequisites = 1;

  // A usage example of a skill outlines the specific steps and conditions
  // under which the skill is utilized, showcasing its functionality and
  // effectiveness.
  // If the usage example has lengthy details, the author can provide a link
  // to the documentation that shows a practical demonstration of how the
  // skill can be applied in a real-world scenario.
  string usage_example = 2;

  // This field describes the error handling strategy for the skill.
  // It can include information about how to handle specific errors,
  // such as retry strategies or recovery procedures.
  string error_handling = 3;
}

message SkillAssets {
  oneof deployment_type {
    // The filename of the skill image.
    string image_filename = 1;
    // A binary proto file that contains the parameterizable behavior tree.
    string behavior_tree_filename = 2;
  }
  // A complete descriptor set for the skill's parameter and execute_result
  // proto messages.
  optional string file_descriptor_set_filename = 3;
}

message SkillManifest {
  // The skill's id.
  intrinsic_proto.assets.Id id = 1;

  // The skill's vendor.
  intrinsic_proto.assets.Vendor vendor = 2;

  // Documentation about the skill which will be shown to users. This field
  // should contain the description of the skill as a summary.
  intrinsic_proto.assets.Documentation documentation = 3;

  // Extended documentation about the skill which will be shown to users.
  // This field contains additional information about the skill that is used
  // by automatic skill documentation generation tools. It is optional and can
  // be left empty. However, only skills that specify this field will be
  // included in automatic skill documentation generation.
  optional ExtendedDocumentation extended_documentation = 10;

  // Contains user-set options about what skill features are supported by
  // this skill.
  Options options = 4;

  // Specifies the runtime dependencies of this skill.
  Dependencies dependencies = 5;

  // A description of the input parameter message for Execution of the skill.
  ParameterMetadata parameter = 6;

  // A description of the return type for Execution of the skill.
  optional ReturnMetadata return_type = 7;

  // The display name of the skill to be shown in the UI.
  string display_name = 9;

  // List of status codes which the specific skill may return. Codes are
  // specific to the skill's ID (<package>.<name>), i.e., different skills can
  // have the same numeric ID representing different errors.
  repeated intrinsic_proto.assets.StatusSpec status_info = 11;

  // This skill's assets.
  SkillAssets assets = 12;
}

message SkillManifests {
  repeated SkillManifest manifests = 1;
}
