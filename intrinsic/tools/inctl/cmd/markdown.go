// Copyright 2023 Intrinsic Innovation LLC

// Package markdown generates a tar file with markdown documentation for the inctl CLI.
package markdown

import (
	"fmt"
	"os"
	"path"
	"path/filepath"
	"strings"

	"archive/tar"
	"intrinsic/tools/inctl/cmd/root"
	"intrinsic/util/archive/tartooling"

	"github.com/spf13/cobra"
	"github.com/spf13/cobra/doc"
)

// Create tar file from a giving directory
func createTarFileFromDir(destinationPath string, inputPath string) error {
	tarFile, err := os.Create(destinationPath)
	if err != nil {
		return err
	}
	defer tarFile.Close()

	tw := tar.NewWriter(tarFile)
	defer tw.Close()
	if err := tartooling.AddDir(inputPath, tw); err != nil {
		return err
	}
	return nil
}

var (
	// outputPath is the path to store the generated markdown documentation.
	outputPath string
)

// filePrepender is a function that prepends data to the top of each markdown file.
// This is used to customize the docusaurus sidebar layout e.g. inctl_auth_login becomes Inctl Auth Login.
func filePrepender(filename string) string {
	// The template is based on the docusaurus sidebar layout.
	// See https://docusaurus.io/docs/sidebar/autogenerated#doc-item-metadata
	const fmTemplate = `
---
sidebar_label: %s
---
`
	base := filepath.Base(filename)
	name := strings.TrimSuffix(base, path.Ext(filename))
	name = strings.Replace(name, "_", " ", -1)
	return fmt.Sprintf(fmTemplate, name)
}

func linkPrepender(url string) string {
	return url
}

var generateMarkdownCmd = &cobra.Command{
	Use:   "generate_markdown",
	Short: "Generate a tar file with markdown documentation for every inctl commands.",
	Long: `Generate a tar file with markdown documentation for every inctl commands based on the content of the '--help' message of each command.

	Additionally, the generated markdown files are prepended with a template to customize the docusaurus sidebar layout.
	`,
	RunE: func(cmd *cobra.Command, args []string) error {
		fmt.Println("Generating markdown files in ", outputPath)
		const tmpMarkdownDirName = "tmp_dir_markdown_files"
		// Temporary directory to store the markdown files
		dirPath, err := os.MkdirTemp("", tmpMarkdownDirName)
		if err != nil {
			return err
		}
		defer os.RemoveAll(dirPath)

		if err := doc.GenMarkdownTreeCustom(root.RootCmd, dirPath, filePrepender, linkPrepender); err != nil {
			fmt.Println("error generating markdown")
			return err
		}

		// Send the markdown files to a tar file so we can use a simple bazel genrule
		// This simplifies the process since we know the output file name and
		// the 'outs' parameter of the genrule must be a single file.
		if err := createTarFileFromDir(outputPath, dirPath); err != nil {
			fmt.Printf("error creating tar file: %v\n", err)
			return err
		}
		return nil
	},
}

func init() {
	generateMarkdownCmd.Flags().StringVar(&outputPath, "output_path", "/tmp/commands_doc_files", "Path to store the generated markdown documentation in a tar file.")

	root.RootCmd.AddCommand(generateMarkdownCmd)
}
