// Copyright 2023 Intrinsic Innovation LLC

syntax = "proto3";

package intrinsic_proto.grasping;

import "intrinsic/kinematics/types/joint_limits.proto";
import "intrinsic/manipulation/grasping/grasp_placement_constraint.proto";
import "intrinsic/world/proto/object_world_refs.proto";

message GraspRankersParams {
  reserved 1;

  // Parameters for height based ranker.
  optional HeightRankerParams height_ranker_params = 2;

  // Parameters for IK-collision checker. IK and collision parameters specified
  // here are also used for the StraightLineChecker if the latter is enabled.
  optional IkCollisionCheckerParams ik_collision_checker_params = 3;

  // Parameters for visibility based ranker.
  optional VisibilityRankerParams visibility_ranker_params = 4;

  // Parameters for TopDownGraspRanker.
  optional TopDownGraspRankerParams top_down_grasp_ranker_params = 5;

  // Parameters for StraightLineChecker. This uses the same IK and
  // collision settings specified in `ik_collision_checker_params`;
  // if the latter is unspecified, then the default settings are used (checks
  // collisions at pregrasp pose, allows collisions at grasp pose, and requires
  // same branch IK).
  optional StraightLineCheckerParams straight_line_checker_params = 6;

  // Parameters for diversity grasp ranker.
  optional DiversityRankerParams diversity_ranker_params = 8;

  // Parameters for placement constraint checker.
  optional PlacementConstraintCheckerParams
      placement_constraint_checker_params = 9;

  // Weights for the rankers. Weight values have to be non-negative.
  // If the map is empty and a visibility ranker is used, then the visibility
  // ranker's weight is set to 10, and others set to 1; if the map is empty
  // and no visibility rankers are used, then all weights are 1.
  map<string, float> ranker_weights = 7;
}

message DiversityRankerParams {
  // The score to return if a grasp is too close to a recently
  // failed grasp. Defaults to 0.001 when unspecified.
  // Set this to 0 will effectively cause the grasp to be filtered.
  optional float min_score = 1;

  //  The translation distance used to decide
  //  whether a grasp G1 is too close to a grasp G2 in `target_grasps`. If
  //  `dist(G1,G2) < distance_threshold`, return a score of `min_score`.
  // Defaults to 0.01.
  optional float distance_threshold_in_meters = 2;

  // Similar to distance_threshold, but only used to check
  // the distance in the z axis. dist(G1_z, G2_z)) <
  // distance_threshold_z must be true for returning
  // `min_score` for a grasp.
  // Defaults to +inf.
  optional float distance_threshold_z_in_meters = 3;

  // Name of the ranker. Default to diversity_grasp_ranker.
  optional string name = 4;
}

message PinchGripperParams {
  // Reference to the pinch gripper object.
  world.ObjectReference eoat_reference = 1;
  // Joint positions for fully opening the gripper fingers.
  repeated double open_position = 2;
  // Joint positions for fully closing the gripper fingers.
  repeated double close_position = 3;
}

message IkCollisionCheckerParams {
  // Reference(s) to EOAT (end-of-arm tool) parts to allow collision with the
  // target object at grasp pose. Has no effect if unspecified.
  repeated world.ObjectReference collision_excluded_eoat_parts = 8;

  // Name of the ranker. Default to ik_collision_checker.
  optional string name = 6;

  // Joint limits used in grasp/pregrasp pose IK checks.
  optional intrinsic_proto.JointLimitsUpdate joint_limits = 1;

  // Whether to check collisions at grasp pose. On top of this, if
  // `collision_excluded_eoat_parts` is specified, then collisions are
  // ignored between the eoat parts and the target object at grasp pose.
  optional bool check_collision_at_grasp_pose = 2;

  // Whether to require grasp pose to have same kinematic branch as starting
  // robot joint positions.
  optional bool require_same_branch_ik = 3;

  // Passed to `MotionPlannerClient.compute_ik`.
  // This has to be 1 if `require_same_branch_ik` is set to True.
  optional int32 max_num_solutions = 4;

  // Parameters for pinch gripper used for collision checks. If specified, pinch
  // gripper collisions will be checked at grasp pose.
  // Do not set this field if the gripper is not a pinch gripper type.
  optional PinchGripperParams pinch_gripper_params = 9;

  reserved 5, 7;
  reserved "eoat_name";
}

message StraightLineCheckerParams {
  // Name of the ranker. Default to straight_line_checker.
  optional string name = 3;

  // Time limit to compute trajectory. Default to 10 seconds.
  optional int32 traj_planning_timeout_sec = 4;

  // If true, check the full trajectory from the robot's current joint position
  // to pregrasp pose and then to grasp pose. Otherwise, only check the
  // straightline segment from pregrasp pose to grasp pose.
  optional bool check_full_trajectory = 5;

  reserved 1;
  reserved "cartesian_limits";
}

message HeightRankerParams {
  // Minimum expected height (in meters) of an object when grasping, expressed
  // in root frame.
  float min_grasp_height = 1;
  // Maximum expected height (in meters) of an object when grasping, expressed
  // in root frame.
  float max_grasp_height = 2;
  // Name of the ranker. Default to height_grasp_ranker.
  optional string name = 3;
}

message VisibilityRankerParams {
  // Minimum detection visibility in range [0,1] for a grasp to be considered
  // valid.
  float visibility_threshold = 2;

  // Name of the ranker. Default to visibility_grasp_ranker.
  optional string name = 3;

  reserved 1;
  reserved "use_visibility_ranker";
}

message TopDownGraspRankerParams {
  // Used to filter out grasps based on how "top down" their approaching
  // directions are. Grasps whose normalized top-down value is less
  // than this will have a score of 0. E.g., When this is 0.5, all horizontal
  // and bottom-up pointed grasps are scored 0; if 0.75, then all grasps lower
  // than 45 degrees top-down are scored 0. See `TopDownGraspRanker` for
  // details.
  float top_down_score_threshold = 1;

  // Name of the ranker. Default to top_down_grasp_ranker.
  optional string name = 2;
}

message PlacementConstraintCheckerParams {
  // Placement constraints to consider during grasp planning.
  intrinsic_proto.grasping.PlacementConstraints placement_constraints = 1;

  // Name of the ranker. Default to placement_constraint_checker.
  optional string name = 2;
}
