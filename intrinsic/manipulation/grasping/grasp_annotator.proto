// Copyright 2023 Intrinsic Innovation LLC

syntax = "proto3";

package intrinsic_proto.grasping;

import "intrinsic/geometry/api/proto/oriented_bounding_box.proto";
import "intrinsic/geometry/api/proto/triangle_mesh.proto";
import "intrinsic/math/proto/pose.proto";
import "intrinsic/math/proto/vector2.proto";
import "intrinsic/math/proto/vector3.proto";

message MeshData {
  message MeshBytesData {
    // The mesh data as bytes.
    bytes mesh_bytes = 1;
    // The file type of the mesh bytes, e.g.: "glb", "obj", "stl".
    string file_type = 2;
  }
  oneof mesh_data {
    // The triangle mesh with of the part with both faces and vertices specified
    // within. The expectation is three dimensional vertices and triangles for
    // the faces. Specified in row major order.
    intrinsic_proto.geometry.TriangleMesh triangle_mesh = 1;
    // The path to a mesh.
    string mesh_path = 2;
    // The mesh bytes with the file type.
    MeshBytesData mesh_bytes = 3;
  }
}

message ParameterizedGripperSpecs {
  oneof gripper_specs {
    // The specifications for a parameterized suction type gripper.
    ParameterizedSuctionGripperSpecs suction_gripper_specs = 1;
    // The specifications for a parameterized pinch type gripper.
    ParameterizedPinchGripperSpecs pinch_gripper_specs = 2;
  }
}

message ParameterizedSuctionGripperSpecs {
  // The radius of the suction cup in meters.
  float radius_in_meters = 1;
  // The surface roughness threshold of the suction cup in meters.
  optional float surface_roughness_threshold_in_meters = 2;
  // The 2D coordinates of the suction cup locations in meters in the x-y plane
  // of the tool frame where z = 0.
  repeated Vector2 suction_cup_coordinates = 3;
  // The rotation increment to search for grasp annotations in radians.
  // The default value is pi/4 radians.
  optional float rotation_increment_in_radians = 4;
  // The maximum rotation to stop searching for grasp annotations in radians.
  // The default value is pi radians.
  optional float max_rotation_in_radians = 5;
  // The transform to apply to the suction gripper relative to its origin.
  // By default, the gripper z-axis points towards the object.
  optional Pose gripper_origin_t_tool_frame = 6;
}

message ParameterizedPinchGripperSpecs {
  // The opening of the gripper in meters.
  float opening_in_meters = 1;
  // The width of the finger in meters.
  float finger_width_in_meters = 2;
  // The length of the finger in meters.
  float finger_length_in_meters = 3;
  // The minimum closing distance of the gripper in meters. Should be a
  // non-negative value less than the opening of the gripper. By default, the
  // value is assumed to be 0.0, i.e., the gripper closes completely.
  optional float min_closing_distance_in_meters = 6;
  // The antipodal threshold in radians. If the two surface normals on the
  // object is larger than the threshold, the pose is considered as antipodal.
  // The default value is 3.0 radians.
  optional float antipodal_threshold_in_radians = 4;
  // The transform to apply to the pinch gripper relative to its origin.
  // By default, the gripper z-axis points towards the object, y-axis is algined
  // to the gripper opening direction, and x-axis is aligned to the gripper
  // finger width.
  optional Pose gripper_origin_t_tool_frame = 5;
}

// The weights of the metrics to use for scoring annotation. Weights should be
// non-negative, and are used to compute the weighted geometric mean of the
// respective metrics. Only specified metrics are used for scoring annotation.
message MetricWeights {
  // The weight of the distance to center of mass metric. When unspecified, the
  // metric is not used for scoring annotation.
  optional float distance_to_center_of_mass_weight = 1;
  // The weight of the distance to bounding box corner metric. When unspecified,
  // the metric is not used for scoring annotation.
  optional float distance_to_bounding_box_corner_weight = 2;
}

message GraspAnnotationConstraint {
  oneof Constraint {
    // The bounding box to filter grasp poses, in base frame of the object.
    BoundingBoxConstraint bounding_box_constraint = 1;
    // Axis constraint to filter grasp poses.
    AxisConstraint axis_constraint = 2;
  }

  message BoundingBoxConstraint {
    repeated intrinsic_proto.geometry.OrientedBoundingBox3
        oriented_bounding_boxes = 1;
    // Only select grasp poses outside the box, defaults to false.
    optional bool exclude_poses_in_box = 2;
  }

  message AxisConstraint {
    // The axis to filter grasp poses by, in the base frame of the object.
    // Grasp poses are filtered out if the Z-axis of the grasp pose is not
    // aligned and in the same direction as the axis.
    repeated intrinsic_proto.Vector3 axis = 1;
    // The angle tolerance in radians to filter grasp poses. The default value
    // is 0.01 radians.
    optional float angle_tolerance_in_radians = 2;
  }
}
