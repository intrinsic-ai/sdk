// Copyright 2023 Intrinsic Innovation LLC

syntax = "proto3";

package intrinsic_proto.manipulation.v1;

import "google/protobuf/empty.proto";
import "intrinsic/manipulation/proto/v1/gripper_assembly_metadata.proto";
import "intrinsic/world/proto/object_world_refs.proto";

option java_multiple_files = true;
option java_outer_classname = "GripperExchangeProtos";

message TwoFingerPinchGripperAssemblyObjects {
  // The gripper base object reference. Can be left unspecified only if the
  // gripper base can be uniquely identified based on its scene object type
  // (e.g., specified in the gripper assembly metadata).
  optional intrinsic_proto.world.ObjectReference gripper_base = 1;
  // The finger1 object reference. Can be left unspecified only if the set of
  // (finger1_object, finger2_object) can be uniquely identified based
  // on their scene object types . `finger1` and `finger2` must be both
  // specified or both unspecified.
  optional intrinsic_proto.world.ObjectReference finger1 = 2;
  // The finger2 object reference. Can be left unspecified only if the set of
  // (new_finger1_object, new_finger2_object) can be uniquely identified based
  // on their scene object types. `finger1` and `finger2` must be both specified
  // or both unspecified.
  optional intrinsic_proto.world.ObjectReference finger2 = 3;
  // The peripheral object references. For example, a gripper adapter.
  repeated intrinsic_proto.world.ObjectReference peripherals = 4;
}

message GripperAssemblyObjects {
  // The gripper assembly objects.
  oneof gripper_assembly_objects {
    TwoFingerPinchGripperAssemblyObjects
        two_finger_pinch_gripper_assembly_objects = 1;
  }
}

message TwoFingerPinchGripperDockFrames {
  // The dock frame to attach the finger1.
  intrinsic_proto.world.FrameReference finger1_dock_frame = 1;
  // The dock frame to attach the finger2.
  intrinsic_proto.world.FrameReference finger2_dock_frame = 2;
  // The dock frame to attach the gripper base. If unspecified, gripper base
  // will not be docked.
  optional intrinsic_proto.world.FrameReference gripper_base_dock_frame = 3;
}

message GripperDockFrames {
  // The dock frames for the gripper parts.
  oneof gripper_dock_frames {
    TwoFingerPinchGripperDockFrames two_finger_pinch_gripper_dock_frames = 1;
  }
}

// A request to exchange gripper in the object world.
message ExchangeGripperInObjectWorldRequest {
  message DeleteOrDockGripperParts {
    // Either delete or specify the dock frames for the gripper parts.
    oneof delete_or_dock_gripper_parts {
      GripperDockFrames gripper_dock_frames = 1;
      google.protobuf.Empty delete_gripper_parts = 2;
    }
  }

  // The old gripper assembly metadata.
  intrinsic_proto.manipulation.v1.GripperAssemblyMetadata
      old_gripper_assembly_metadata = 1;
  // The new gripper assembly metadata.
  intrinsic_proto.manipulation.v1.GripperAssemblyMetadata
      new_gripper_assembly_metadata = 2;
  // The old gripper assembly object references. Can be left unspecified only if
  // the objects can be uniquely identified based on the gripper assembly
  // metadata.
  optional GripperAssemblyObjects old_gripper_assembly_objects = 3;
  // The new gripper assembly object references. Can be left unspecified only if
  // the objects can be uniquely identified based on the gripper assembly
  // metadata.
  optional GripperAssemblyObjects new_gripper_assembly_objects = 4;
  // Either delete or specify the dock frames for the old gripper parts.
  DeleteOrDockGripperParts delete_or_dock_old_gripper_parts = 5;
  // Whether to exchange the gripper base on top of peripherals. If false,
  // only the peripherals will be exchanged (e.g., the fingers)
  bool enable_exchange_gripper_base = 6;
  // The frame to attach the new gripper base to. Can leave unspecified only
  // if `enable_exchange_gripper_base` is false.
  optional intrinsic_proto.world.FrameReference new_gripper_base_attach_frame =
      7;
  // The world id to exchange the gripper in.
  string world_id = 8;
}

message ExchangeGripperInObjectWorldResponse {}

service GripperExchangeService {
  // Exchange gripper in the object world. The old gripper parts are either
  // docked to corresponding frames or deleted from the world. The new gripper
  // base (if exchanged) will be attached to the`new_gripper_base_attach_frame`.
  rpc ExchangeGripperInObjectWorld(ExchangeGripperInObjectWorldRequest)
      returns (ExchangeGripperInObjectWorldResponse) {}
}
