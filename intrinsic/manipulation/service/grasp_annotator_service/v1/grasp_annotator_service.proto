// Copyright 2023 Intrinsic Innovation LLC

syntax = "proto3";

package intrinsic_proto.grasping.service.grasp_annotator_service.v1;

import "google/rpc/status.proto";
import "intrinsic/manipulation/grasping/grasp_annotations.proto";
import "intrinsic/manipulation/grasping/grasp_annotator.proto";

message GraspAnnotatorConfig {
  string ingress_address = 1;
}

message GraspAnnotatorRequest {
  // The mesh data as a path, bytes, or triangle mesh to annotate on.
  MeshData mesh_data = 1;
  // The specifications for a parameterized gripper to use for annotation.
  ParameterizedGripperSpecs gripper_specs = 2;
  // The number of samples to query on the mesh.
  int64 num_samples = 3;
  // The metrics weights to score annotation with. If not provided, the
  // annotation are not scored and the default score will be set to 1.0.
  optional MetricWeights annotation_metrics_weights = 4;
  // Truncate the number of annotations to return to this number.
  // If `grasp_annotator_metrics` is set, the top N annotations sorted by score
  // will be returned in descending order (unordered in the absence of metrics).
  // If not set, all feasible annotations will be returned.
  optional int32 max_num_annotations = 5;
  // Constraints to filter grasp poses.
  optional intrinsic_proto.grasping.GraspAnnotationConstraint constraint = 6;
}

message VisualizationOptions {
  // The lifetime of the visualization in seconds. Default is 300 seconds.
  optional int32 lifetime_sec = 1;
}

message GraspAnnotatorResponse {
  // Annotated grasps.
  GraspAnnotations annotations = 1;
}

message GraspAnnotatorVisualizeRequest {
  // Annotated grasps.
  GraspAnnotations annotations = 1;
  // The object instance to associate the visualization with.
  string object_instance_name = 2;
  // Constraints to filter grasp poses. If set, the constraints will be
  // visualized as well.
  optional GraspAnnotationConstraint constraint = 3;
  // Visualization options.
  optional VisualizationOptions visualization_options = 4;
}

message GraspAnnotatorVisualizeResponse {
  // Contains status of the visualization, and an error if the visualization
  // failed.
  google.rpc.Status status = 1;
}

message SaveAnnotationsRequest {
  // Annotations to save
  GraspAnnotations annotations = 1;

  // Edits on top of the annotations
  GraspAnnotationsEdits edits = 2;

  // Asset id of object for which to store these annotations.
  string scene_object_id = 3;

  // User-specified ID for this annotation set
  // Will overwrite any existing annotations for this ID
  string annotations_id = 4;
}

message SaveAnnotationsResponse {}

message FetchAnnotationsRequest {
  // Unique id of object whose annotations to fetch
  string scene_object_id = 1;

  // ID for annotation set
  string annotations_id = 2;
}

message FetchAnnotationsResponse {
  // Annotations for the given object
  GraspAnnotations annotations = 1;

  // Edits on top of the annotations
  GraspAnnotationsEdits edits = 2;
}

message CopyAnnotationsRequest {
  // Object whose annotations to copy
  string scene_scene_object_id = 1;

  // ID of annotation set to copy
  string annotations_id = 2;

  // Name of cluster whose KV store to copy to.  Empty string to copy
  // to the global KV store.
  optional string destination = 3;
}

message CopyAnnotationsResponse {}

service GraspAnnotator {
  // Annotate grasps.
  rpc Annotate(GraspAnnotatorRequest) returns (GraspAnnotatorResponse) {}

  // Visualize grasp annotations.
  rpc Visualize(GraspAnnotatorVisualizeRequest)
      returns (stream GraspAnnotatorVisualizeResponse) {}

  // Save annotations to KV store.
  rpc SaveAnnotations(SaveAnnotationsRequest)
      returns (SaveAnnotationsResponse) {}

  // Fetch saved annotations from KV store
  rpc FetchAnnotations(FetchAnnotationsRequest)
      returns (FetchAnnotationsResponse) {}

  // Copy annotations to another KV store
  rpc CopyAnnotations(CopyAnnotationsRequest)
      returns (CopyAnnotationsResponse) {}
}
