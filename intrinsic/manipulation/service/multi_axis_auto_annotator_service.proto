// Copyright 2023 Intrinsic Innovation LLC

// The definition of an auto annotator service.
syntax = "proto3";

package intrinsic_proto.grasping.service;

import "intrinsic/geometry/proto/triangle_mesh.proto";
import "intrinsic/manipulation/grasping/schmalz_multi_axis_grasp.proto";

message GetAnnotationsRequest {
  // The triangle mesh with of the part with both faces and vertices specified
  // within. The expectation is three dimensional vertices and triangles for the
  // faces. Specified in row major order.
  intrinsic_proto.geometry.TriangleMesh triangle_mesh = 1;
}

message GetAnnotationsResponse {
  // The annotations generated for the given part.
  repeated intrinsic_proto.grasping.SchmalzMultiAxisGraspAnnotation
      annotations = 1;

  // Any message to help debugging.
  optional string debug_message = 2;
}

message GetAnnotationsAndCommandsRequest {
  // The triangle mesh with of the part with both faces and vertices specified
  // within. The expectation is three dimensional vertices and triangles for the
  // faces. Specified in row major order.
  intrinsic_proto.geometry.TriangleMesh triangle_mesh = 1;

  // The service address of the world service.
  string world_service_address = 2;

  // The service address of the geometry service.
  string geometry_service_address = 3;
}

message GetAnnotationsAndCommandsResponse {
  // The annotations generated for the given part.
  repeated intrinsic_proto.grasping.SchmalzMultiAxisGraspAnnotation
      annotations = 1;

  repeated intrinsic_proto.grasping.SchmalzMultiAxisGraspCommand commands = 2;

  // Any message to help debugging.
  optional string debug_message = 3;
}

message MultiAxisAutoAnnotatorServiceConfig {
  // The ingress address for connecting to all services.
  string ingress_address = 1;
}

service MultiAxisAutoAnnotatorService {
  // Returns the annotations for the given part.
  rpc GetAnnotations(GetAnnotationsRequest) returns (GetAnnotationsResponse) {
    // errors: no annotations available
  }

  // Returns the annotations and commands for the given part.
  rpc GetAnnotationsAndCommands(GetAnnotationsAndCommandsRequest)
      returns (GetAnnotationsAndCommandsResponse) {
    // errors: no annotations available
  }
}
