// Copyright 2023 Intrinsic Innovation LLC

syntax = "proto3";

package intrinsic_proto.vmpoolleaseapi.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

message PingResponse {
  string msg = 1;
}

message LeaseRequest {
  // The pool to lease from.
  // Optional. If empty, the server selects one for you.
  string pool = 1;

  // The time when the lease should expire.
  // The lease time might be different than what you requested.
  // Optional. If empty, the server defines it for you.
  google.protobuf.Timestamp expires = 2;

  // The service requesting the lease.
  // Only the service which created it can modify it.
  string service_tag = 3;

  // By specifying a UUID, you can reserve a lease.
  // If an instance is available, the reservation will be ignored.
  // If no instance is available, your reservation will be enqueued.
  // The reservation will be saved server-sided and available instances's will
  // be leased to reservation in a FIFO order.
  // A reservation expires after a time (specified in the pool configuration) of
  // its creation. The expiration time will be deferred on every lease request
  // using the same reservation_id.
  optional string reservation_id = 4;
}

message Lease {
  // The instance / lease identifier
  string instance = 1;
  // From which pool the instance was taken.
  string pool = 2;
  // The time when the lease expires.
  google.protobuf.Timestamp expires = 3;
  // The zone of the instance
  string zone = 4;
}

message LeaseResponse {
  Lease lease = 1;
}

message ReturnRequest {
  // The instance to return.
  string instance = 1;
  // The service requesting the return.
  // Must match the service tag of the lease.
  string service_tag = 3;
}

message ReturnResponse {}

message ExtendToRequest {
  // The instance to extend the lease for.
  string instance = 1;
  // The point in time to extend to.
  google.protobuf.Timestamp to = 2;
  // The service requesting the lease extension.
  // Must match the service tag of the lease.
  string service_tag = 3;
  // If true, the lease will only be extended, but not shortened. If the
  // requested extension is shorter than the current lease, the lease will not
  // be updated.
  bool extend_only = 4;
}

message ExtendToResponse {
  // The new lease
  Lease lease = 1;
}

message Label {
  string key = 1;
  string value = 2;
}

message Pool {
  // The name / identifier of the pool.
  string name = 1;
  // Pool labels.
  repeated Label labels = 2;
}

message PoolsRequest {}

message PoolsResponse {
  repeated Pool pools = 1;
}

message GetLeaseRequest {
  // The instance to get the lease for.
  string instance = 1;
}

message GetLeaseResponse {
  Lease lease = 1;
}

service VMPoolLeaseService {
  // Ping can be used for latency and health checks.
  // Do not rely on the response content.
  rpc Ping(google.protobuf.Empty) returns (PingResponse) {}

  // Lease a VM from a pool.
  // The lease time might be less than what you requested.
  rpc Lease(LeaseRequest) returns (LeaseResponse) {}

  // Return a VM back to the pool and end the lease.
  // The VM will be destroyed and all data on the VM will be lost.
  rpc Return(ReturnRequest) returns (ReturnResponse) {}

  // Extend the lease of a VM to a specific time.
  // The lease extension might be less than what you requested.
  rpc ExtendTo(ExtendToRequest) returns (ExtendToResponse) {}

  // List all available pools.
  rpc Pools(PoolsRequest) returns (PoolsResponse) {}

  // Get the lease information of a VM.
  rpc GetLease(GetLeaseRequest) returns (GetLeaseResponse) {}
}
