// Copyright 2023 Intrinsic Innovation LLC

syntax = "proto3";

package intrinsic_proto.assets.v1;

import "google/longrunning/operations.proto";
import "intrinsic/assets/data/proto/v1/data_asset.proto";
import "intrinsic/assets/proto/asset_type.proto";
import "intrinsic/assets/proto/id.proto";
import "intrinsic/assets/proto/metadata.proto";
import "intrinsic/assets/proto/v1/search.proto";
import "intrinsic/assets/proto/view.proto";
import "intrinsic/assets/scene_objects/proto/scene_object_manifest.proto";
import "intrinsic/assets/services/proto/service_manifest.proto";
import "intrinsic/skills/proto/processed_skill_manifest.proto";

// Service to manage the installation of assets.
service InstalledAssets {

  // Lists the currently installed assets.
  rpc ListInstalledAssets(ListInstalledAssetsRequest)
      returns (ListInstalledAssetsResponse);

  // Gets a specific installed asset.
  rpc GetInstalledAsset(GetInstalledAssetRequest) returns (InstalledAsset);

  // Installs the specified asset into the solution.
  rpc CreateInstalledAsset(CreateInstalledAssetRequest)
      returns (google.longrunning.Operation) {
    option (google.longrunning.operation_info) = {
      metadata_type: "CreateInstalledAssetMetadata"
      response_type: "InstalledAsset"
    };
  }

  // Installs the specified assets into the solution.
  rpc CreateInstalledAssets(CreateInstalledAssetsRequest)
      returns (google.longrunning.Operation) {
    option (google.longrunning.operation_info) = {
      metadata_type: "CreateInstalledAssetsMetadata"
      response_type: "CreateInstalledAssetsResponse"
    };
  }

  // Uninstalls the specified asset from the solution.
  rpc DeleteInstalledAsset(DeleteInstalledAssetRequest)
      returns (google.longrunning.Operation) {
    option (google.longrunning.operation_info) = {
      metadata_type: "DeleteInstalledAssetMetadata"
      response_type: "google.protobuf.Empty"
    };
  }

  // Uninstalls the specified assets from the solution.
  rpc DeleteInstalledAssets(DeleteInstalledAssetsRequest)
      returns (google.longrunning.Operation) {
    option (google.longrunning.operation_info) = {
      metadata_type: "DeleteInstalledAssetsMetadata"
      response_type: "google.protobuf.Empty"
    };
  }
}

message ListInstalledAssetsRequest {
  message Filter {
    // Deprecated: use asset_types instead.
    optional AssetType asset_type = 1 [deprecated = true];

    // Filter assets by type (OR).
    repeated AssetType asset_types = 2;
  }

  int64 page_size = 1;
  string page_token = 2;
  optional Filter strict_filter = 3;

  // Order by which to sort the assets.
  intrinsic_proto.assets.v1.OrderBy order_by = 4;

  // If true, sort assets in descending order.
  bool sort_descending = 5;

  intrinsic_proto.catalog.AssetViewType view = 6;
}

message InstalledAsset {
  Metadata metadata = 1;
}

message ListInstalledAssetsResponse {
  repeated InstalledAsset installed_assets = 1;

  // Pass this token to the subsequent list request to obtain the next page.
  string next_page_token = 2;
}

message GetInstalledAssetRequest {
  Id id = 1;
  intrinsic_proto.catalog.AssetViewType view = 2;
}

enum UpdatePolicy {
  // Use a default policy, which may change with platform updates.
  UPDATE_POLICY_UNSPECIFIED = 0;
  // Only add new assets to the solution and reject any that would
  // trigger an update of any installed asset.
  UPDATE_POLICY_ADD_NEW_ONLY = 10;
  // Only update assets if they are currently unused.
  UPDATE_POLICY_UPDATE_UNUSED = 20;
  // Only update assets if all are considered reasonably compatible. This may
  // allow backwards incompatible changes if it will not cause problems for the
  // solution.  If an asset is unused, then any update will be allow.
  UPDATE_POLICY_UPDATE_COMPATIBLE = 50;
}

message CreateInstalledAssetRequest {
  message Asset {
    oneof variant {
      IdVersion catalog = 1;
      intrinsic_proto.services.ProcessedServiceManifest service = 2;
      intrinsic_proto.scene_objects.ProcessedSceneObjectManifest scene_object =
          3;
      intrinsic_proto.skills.ProcessedSkillManifest skill = 4;
      intrinsic_proto.data.v1.DataAsset data = 5;
    }
  }

  Asset asset = 1;
  UpdatePolicy policy = 2;
}

message CreateInstalledAssetMetadata {}

message CreateInstalledAssetsRequest {
  message Asset {
    oneof variant {
      IdVersion catalog = 1;
      intrinsic_proto.services.ProcessedServiceManifest service = 2;
      intrinsic_proto.scene_objects.ProcessedSceneObjectManifest scene_object =
          3;
      intrinsic_proto.skills.ProcessedSkillManifest skill = 4;
      intrinsic_proto.data.v1.DataAsset data = 5;
    }
  }

  repeated Asset assets = 1;
  UpdatePolicy policy = 2;
}

message CreateInstalledAssetsMetadata {}

message CreateInstalledAssetsResponse {
  // The description of the installed assets, in the order requested for
  // installation.
  repeated InstalledAsset installed_assets = 1;
}

enum DeletePolicy {
  // Use a default policy, which may change with platform updates.
  POLICY_UNSPECIFIED = 0;
  // Reject a request to delete an asset that is currently in use.
  POLICY_REJECT_USED = 10;
}

message DeleteInstalledAssetRequest {
  Id asset = 1;
  DeletePolicy policy = 2;
}

message DeleteInstalledAssetMetadata {}

message DeleteInstalledAssetsRequest {
  enum Policy {
    // Use a default policy, which may change with platform updates.
    POLICY_UNSPECIFIED = 0;
    // Reject a request to delete an asset that is currently in use.
    POLICY_REJECT_USED = 10;
  }

  repeated Id assets = 1;
  Policy policy = 2;
}

message DeleteInstalledAssetsMetadata {}
