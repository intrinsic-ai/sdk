// Copyright 2023 Intrinsic Innovation LLC

syntax = "proto3";

package intrinsic_proto.assets;

import "google/longrunning/operations.proto";
import "google/protobuf/any.proto";
import "intrinsic/assets/proto/id.proto";
import "intrinsic/math/proto/pose.proto";
import "intrinsic/scene/proto/v1/scene_object_config.proto";
import "intrinsic/world/proto/object_world_refs.proto";

// Service to manage the deployment of assets, specifically, resource instances
// and skills.
service AssetDeploymentService {

  // Creates a new resource instance from a resource type present in the
  // resource catalog.
  // On success the `response` field of `Operation` is set to
  // `CreateResourceFromCatalogResponse`.
  // On failure, any changes applied to the workcell are reverted.
  rpc CreateResourceFromCatalog(CreateResourceFromCatalogRequest)
      returns (google.longrunning.Operation) {}

  // Deletes a previously added resource.
  // The world object corresponding to the resource instance is also deleted
  // including any attached frames.
  rpc DeleteResource(DeleteResourceRequest)
      returns (google.longrunning.Operation) {
    option (google.longrunning.operation_info) = {
      response_type: "google.protobuf.Empty"
    };
  }

  // Update an existing resource instance with a different resource
  // configuration or the resource type version.
  // On success, `response` field of `Operation` is set to
  // `Resource`.
  rpc UpdateResource(UpdateResourceRequest)
      returns (google.longrunning.Operation) {
    option (google.longrunning.operation_info) = {
      response_type: "Resource"
    };
  }
}

message ResourceConfiguration {
  // Optional resource-specific runtime configuration.
  optional google.protobuf.Any configuration = 1;

  // Hostname on which the service should be run.
  optional string scheduled_node_hostname = 3;

  // Optional scene object configuration.
  optional scene_object.v1.SceneObjectConfig scene_object_config = 6;

  reserved 4, 5;
  reserved "parent", "parent_t_this";
}

message Resource {
  // Name of the resource.
  string name = 1;

  // Versioned identifier for the backing asset.
  IdVersion id_version = 2;

  // Configuration for the resource.
  ResourceConfiguration configuration = 3;
}

// Configuration for the resource instance.
message ResourceInstanceConfiguration {
  // User provided name for the resource instance. This should be unique within
  // the resource set.
  string name = 1;

  // Service configuration, if the asset has a service component.
  optional google.protobuf.Any configuration = 2;

  // Scene object configuration, if the asset has a scene object component.
  optional intrinsic_proto.scene_object.v1.SceneObjectConfig
      scene_object_config = 6;

  // Optional parent where to attach the new resource instance to.
  // This may only be specified if the resource type associated with this
  // resource instance specifies a `world_fragment`. Otherwise, specifying
  // `parent` is an error.
  optional intrinsic_proto.world.ObjectReferenceWithEntityFilter parent = 4;

  // Optional pose relative to the attached parent.
  // This may only be specified if the resource type associated with this
  // resource instance specifies a `world_fragment`. Otherwise, specifying
  // `parent_t_this` is an error.
  optional intrinsic_proto.Pose parent_t_this = 5;
}

message CreateResourceFromCatalogRequest {
  // Versioned type identifier for the resource type that would be used to
  // create the resource instance. The resource type should be present in the
  // catalog.
  string type_id_version = 1;

  // Configuration for the resource instance.
  ResourceInstanceConfiguration configuration = 2;

  // World ID for which we will instantiate this asset. If left unset, no world
  // operations will be performed.
  string world_id = 4;

  reserved 3;
  reserved "asset_type";
}

message CreateResourceFromCatalogResponse {
  // Name of the resource instance that was installed.
  string name = 1;
}

message DeleteResourceRequest {
  // Name of the resource instance to delete.
  string name = 1;

  // World ID from where we will delete this asset. If left unset, no world
  // operations will be performed.
  string world_id = 3;

  reserved 2;
  reserved "deletion_strategy";
}

message UpdateResourceRequest {
  // Resource to update.
  Resource resource = 1;

  // World ID for which we will update this asset. If left unset, no world
  // operations will be performed.
  string world_id = 2;
}
