// Copyright 2023 Intrinsic Innovation LLC

syntax = "proto3";

package intrinsic_proto.catalog.v1;

import "google/api/field_behavior.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/field_mask.proto";
import "intrinsic/assets/catalog/proto/v1/release_metadata.proto";
import "intrinsic/assets/data/proto/v1/data_asset.proto";
import "intrinsic/assets/data/proto/v1/referenced_data.proto";
import "intrinsic/assets/hardware_devices/proto/v1/hardware_device_manifest.proto";
import "intrinsic/assets/proto/asset_tag.proto";
import "intrinsic/assets/proto/asset_type.proto";
import "intrinsic/assets/proto/id.proto";
import "intrinsic/assets/proto/metadata.proto";
import "intrinsic/assets/proto/v1/search.proto";
import "intrinsic/assets/proto/view.proto";
import "intrinsic/assets/scene_objects/proto/scene_object_manifest.proto";
import "intrinsic/assets/services/proto/service_manifest.proto";
import "intrinsic/skills/proto/processed_skill_manifest.proto";

// Provides access to assets in the asset catalog.
service AssetCatalog {
  // Gets (a view of) the specified asset.
  rpc GetAsset(GetAssetRequest) returns (Asset);

  // Lists (views of) assets that satisfy the specified constraints.
  rpc ListAssets(ListAssetsRequest) returns (ListAssetsResponse);

  // Adds a new version of an asset to the catalog.
  //
  // The caller must have access to the organization that owns the package
  // (asset.metadata.id_version.package) to create an asset within it. The first
  // two elements of the package are the top-level package (eg "ai.intrinsic").
  // If the package does not exist, this will fail.
  rpc CreateAsset(CreateAssetRequest) returns (Asset);

  // Updates the release metadata of the specified asset.
  //
  // NOTE: If this RPC is used to remove the org-private flag on an asset, that
  // flag CANNOT be re-added later.
  rpc UpdateReleaseMetadata(UpdateReleaseMetadataRequest)
      returns (ReleaseMetadata);

  // Prepares a ReferencedData so that it can be included in an asset that will
  // be released to the catalog.
  //
  // The prepared form of the data to include in the asset is returned.
  //
  // This RPC is streaming in order to enable referenced files to be uploaded in
  // chunks while preparing the data. The client should begin by opening a
  // stream and sending the ReferencedData in an initial request. If the
  // ReferencedData references a file, then the client should then send chunks
  // of the file data until the entire file has been sent. Finally, the client
  // should close the stream.
  rpc PrepareReferencedData(stream PrepareReferencedDataRequest)
      returns (PrepareReferencedDataResponse);
}

// A specific version of an asset in the catalog.
message Asset {
  message DataMetadata {
    // The fully qualified proto name of the data payload.
    string proto_name = 1;
  }
  message DataDeploymentData {
    intrinsic_proto.data.v1.DataAsset data = 1;
  }
  message SceneObjectDeploymentData {
    // The scene object manifest.
    intrinsic_proto.scene_objects.ProcessedSceneObjectManifest manifest = 1;
  }
  message HardwareDeviceMetadata {
    // The list of gRPC service names that the hardware device exposes.
    repeated string service_proto_prefixes = 1;
  }
  message HardwareDeviceDeploymentData {
    // The hardware device manifest.
    intrinsic_proto.hardware_devices.v1.ProcessedHardwareDeviceManifest
        manifest = 1;
    // The file descriptor set for the hardware device and all of its composed
    // assets.
    google.protobuf.FileDescriptorSet file_descriptor_set = 2
        [(google.api.field_behavior) = OUTPUT_ONLY];
  }
  message ServiceMetadata {
    // The list of gRPC service names that the service exposes.
    repeated string service_proto_prefixes = 1;
  }
  message ServiceDeploymentData {
    // The service manifest.
    intrinsic_proto.services.ProcessedServiceManifest manifest = 1;
  }
  message SkillDeploymentData {
    // The skill manifest
    intrinsic_proto.skills.ProcessedSkillManifest manifest = 1;
  }
  message AssetDeploymentData {
    oneof asset_specific_deployment_data {
      DataDeploymentData data_specific_deployment_data = 3;
      SceneObjectDeploymentData scene_object_specific_deployment_data = 4;
      HardwareDeviceDeploymentData hardware_device_specific_deployment_data = 5;
      ServiceDeploymentData service_specific_deployment_data = 1;
      SkillDeploymentData skill_specific_deployment_data = 2;
    }
  }

  // General metadata that apply to all assets.
  intrinsic_proto.assets.Metadata metadata = 1;

  oneof asset_specific_metadata {
    DataMetadata data_specific_metadata = 4
        [(google.api.field_behavior) = OUTPUT_ONLY];
    HardwareDeviceMetadata hardware_device_specific_metadata = 6
        [(google.api.field_behavior) = OUTPUT_ONLY];
    ServiceMetadata service_specific_metadata = 2
        [(google.api.field_behavior) = OUTPUT_ONLY];
  }

  // Release-related metadata about the asset.
  ReleaseMetadata release_metadata = 5;

  // Asset deployment data.
  AssetDeploymentData deployment_data = 3;
}

message GetAssetRequest {
  oneof asset_id {
    // The asset ID. Uses the default version of the asset.
    intrinsic_proto.assets.Id id = 1;

    // The asset ID and version.
    intrinsic_proto.assets.IdVersion id_version = 2;
  }

  // The type of view to return. Defaults to ASSET_VIEW_TYPE_BASIC.
  AssetViewType view = 4;

  reserved 3;
  reserved "asset_type";
}

message ListAssetsRequest {
  // Used to filter returned assets.
  message AssetFilter {
    // Filter assets by type (OR).
    repeated intrinsic_proto.assets.AssetType asset_types = 1;

    // Filter assets by exact ID. Either id or only_default must be set.
    optional string id = 2;

    // Filter assets by display name (case-insensitive substring search).
    optional string display_name = 3;

    // Filter assets by asset tag.
    optional intrinsic_proto.assets.AssetTag asset_tag = 4;

    // Only return default versions of assets.
    optional bool only_default = 5;

    // Filter by assets that provide all of the specified interfaces (exact
    // match).
    //
    // The nature of the interface depends on the asset type, but is always
    // represented as a string. For example, a Data asset provides a proto of
    // a specific type, and its "interface" is the fully qualified name of that
    // proto. A Service can provide a gRPC service, and its "interface" is the
    // fully qualified proto prefix of that gRPC service.
    repeated string provides = 6;
  }

  // Maximum number of assets to return (fewer may be returned).
  //
  // If unspecified (or set to 0), defaults to 20.
  //
  // The maximum value is 200; Larger values will be coerced to the maximum.
  int64 page_size = 1;

  // A page token received from a previous `ListAssets` call. Provide this token
  // to retrieve the next page of results.
  //
  // When paginating, all other parameters provided to `ListAssets` must match
  // the call that provided the page token.
  //
  // If unspecified, up to the first `page_size` matching assets will be
  // returned.
  string page_token = 2;

  // The type of view to return. Defaults to ASSET_VIEW_TYPE_BASIC.
  AssetViewType view = 3;

  // Filter to apply when listing assets. Required: Either id or only_default
  // must be set.
  optional AssetFilter strict_filter = 4;

  // Order by which to sort the assets.
  intrinsic_proto.assets.v1.OrderBy order_by = 5;

  // If true, sort assets in descending order.
  bool sort_descending = 6;
}

message ListAssetsResponse {
  // The assets that satisfied the request.
  repeated Asset assets = 1;

  // A token that can be sent as `ListAssetsRequest.page_token` to retrieve the
  // next page of results.
  //
  // If this field is empty, there are no subsequent pages.
  string next_page_token = 2;
}

message CreateAssetRequest {
  // The asset to create.
  Asset asset = 1;

  // Use asset.release_metadata.org_private instead.
  optional bool org_private = 2 [deprecated = true];
}

message UpdateReleaseMetadataRequest {
  // The IDVersion of the asset to update.
  intrinsic_proto.assets.IdVersion id_version = 1;

  // The release metadata to update.
  ReleaseMetadata release_metadata = 2;

  // The list of fields to update.
  google.protobuf.FieldMask update_mask = 3;
}

message PrepareReferencedDataRequest {
  oneof data {
    // The ReferencedData to prepare.
    intrinsic_proto.data.v1.ReferencedData referenced_data = 1;

    // A chunk of the data to prepare.
    bytes data_chunk = 2;
  }
}

message PrepareReferencedDataResponse {
  // The prepared ReferencedData.
  intrinsic_proto.data.v1.ReferencedData referenced_data = 1;
}
