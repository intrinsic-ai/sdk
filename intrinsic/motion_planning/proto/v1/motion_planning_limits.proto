// Copyright 2023 Intrinsic Innovation LLC

syntax = "proto3";

package intrinsic_proto.motion_planning.v1;

import "intrinsic/kinematics/types/joint_limits.proto";
import "intrinsic/skills/proto/skill_parameter_metadata.proto";

message DynamicCartesianLimits {
  // Maximum Cartesian rotational velocity. If not
  // specified, the default value defined in the robot limits will be used.
  optional double max_rotational_velocity = 2
      [(intrinsic_proto.skills.skill_parameter_metadata).unit =
           "radians/second"];
  // Maximum Cartesian translational velocity. The value
  // defines the max translational velocity in the x, y, and z axis. If not
  // specified, the default value defined in the robot limits will be used.
  optional double max_translational_velocity = 3
      [(intrinsic_proto.skills.skill_parameter_metadata).unit =
           "meters/second"];
  // Maximum Cartesian rotational acceleration limits.
  // If not specified, the default value defined in the robot limits will be
  // used.
  optional double max_rotational_acceleration = 4
      [(intrinsic_proto.skills.skill_parameter_metadata).unit =
           "radians/second^2"];
  // Maximum Cartesian translational acceleration limits.
  // The value defines the max translational acceleration in the x, y,
  // and z axis. If not specified, the default value defined in the robot limits
  // will be used.
  optional double max_translational_acceleration = 5
      [(intrinsic_proto.skills.skill_parameter_metadata).unit =
           "meters/second^2"];
}
message JointLimitsUpdate {
  // Lower joint position limits allow to restrict the robot joint movement in
  // joint space. Each joint of the robot has lower (min) and upper (max)
  // limits. The specified limits need to be within the robot application
  // limits.
  optional intrinsic_proto.RepeatedDouble min_position = 1;
  // Upper joint position limits allow to restrict the robot joint movement in
  // joint space. Each joint of the robot has lower (min) and upper (max)
  // limits. The specified limits need to be within the robot application
  // limits.
  optional intrinsic_proto.RepeatedDouble max_position = 2;
  // Maximum joint velocity limits per joint. Units are in radians or degrees
  // per second. When not specified, the application limits of the robot will be
  // used.
  optional intrinsic_proto.RepeatedDouble max_velocity = 3;
  // Max joint acceleration limits per joint. Units are in radians or degrees
  // per second^2. When not specified, the acceleration limits from the robot
  // application limits will be used.
  optional intrinsic_proto.RepeatedDouble max_acceleration = 4;
  // Maximum joint jerk limits for the robot. Units are in radians or degrees
  // per second^3. When not specified, the jerk limits from the robot
  // application limits will be used.
  optional intrinsic_proto.RepeatedDouble max_jerk = 5;
}
