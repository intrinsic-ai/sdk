// Copyright 2023 Intrinsic Innovation LLC

syntax = "proto3";

package intrinsic_proto.motion_planning.v1;

import "intrinsic/motion_planning/proto/v1/geometric_constraints.proto";
import "intrinsic/motion_planning/proto/v1/motion_blending_parameter.proto";
import "intrinsic/motion_planning/proto/v1/motion_planning_limits.proto";
import "intrinsic/skills/proto/skill_parameter_metadata.proto";
import "intrinsic/world/proto/collision_settings.proto";

message PathConstraint {
  // Allows setting the motion type. ANY is the default motion
  // type that enables arbitrary collision free paths in configuration space.
  // LINEAR enforces Cartesian linear trajectories. JOINT
  // enforces joint space interpolation.  A planning failure error will
  // be returned if a motion cannot be found of the given type.
  optional MotionSegment.MotionType motion_type = 6;
  // Local collision settings for the individual segments. If not defined,
  // segment will use the global collision settings if defined or the default
  // collision settings with zero margin if none are set.
  optional intrinsic_proto.world.CollisionSettings collision_settings = 1;

  // Specifies geometric constraints that will be applied to the motion of the
  // robot.
  optional intrinsic_proto.motion_planning.v1.UniformGeometricConstraint
      uniform_geometric_constraint = 5;

  reserved "joint_position_limits";
  reserved 2, 3, 4;
}

message MotionSegment {
  enum MotionType {
    ANY = 0;
    LINEAR = 1;
    JOINT = 2;
  }

  // The motion target of the segment defines the final robot configuration for
  // this segment. The target is defined as a set of constraints that can be
  // specified in terms of either joint position or Cartesian constraints like
  // a pose.
  intrinsic_proto.motion_planning.v1.GeometricConstraint target = 5;
  // Allows setting the motion type. ANY is the default motion
  // type that enables arbitrary collision free paths in configuration space.
  // LINEAR enforces Cartesian linear trajectories. JOINT
  // enforces joint space interpolation.  A planning failure error will
  // be returned if a motion cannot be found of the given type.
  MotionType motion_type = 15;

  // Local collision settings for the individual segments. If not defined,
  // segment will use the global collision settings if defined or the default
  // collision settings with zero margin if none are set.
  optional intrinsic_proto.world.CollisionSettings collision_settings = 16;

  // Specifies geometric constraints that will be applied to the motion of the
  // robot. This will also add the constraint to the start and end configuration
  // of the robot.
  optional intrinsic_proto.motion_planning.v1.UniformGeometricConstraint
      path_constraints = 3;

  // Robot joint limits that allow to update the lower and upper position
  // limits, velocity, acceleration, and
  // jerk for the motion segment. If not defined, the application limits of the
  // robot will be used.
  optional JointLimitsUpdate joint_limits = 17;
  // Cartesian limit constraints allow to restrict the Cartesian
  // velocity and acceleration of the robot motion. If not defined, the default
  // limits defined for the robot will be used for Cartesian linear motions and
  // unlimited limits will be used for all other motions. The limit constraints
  // apply to the origin of the moving frame defined in the motion target.
  optional intrinsic_proto.motion_planning.v1.DynamicCartesianLimits
      cartesian_limits = 18;
  reserved "joint_position", "target_constraints", "limit_constraint";
  reserved 1, 2, 4;
}

message MotionSpecification {
  // The motion is divided into segments, where each motion segment defines a
  // single motion target as well as optional path and dynamic limit
  // constraints.
  // Note: Currently it is not possible to combine motion segments with linear
  // Cartesian motion requirements with those without linear Cartesian motion
  // requirement. We also do not currently support different joint limits for
  // different segments.
  repeated MotionSegment motion_segments = 1;

  // The curve waypoint fitting parameters that will be applied during
  // trajectory generation if multiple motion segments have been defined. Use
  // Cartesian blending parameter for linear Cartesian motion requests and joint
  // blending parameter otherwise.
  optional BlendingParameters curve_parameters = 3;
  reserved "collision_settings";
  reserved 2;
}
