// Copyright 2023 Intrinsic Innovation LLC

syntax = "proto3";

package intrinsic_proto.motion_planning;

import "intrinsic/kinematics/types/joint_limits.proto";
import "intrinsic/skills/proto/skill_parameter_metadata.proto";
import "intrinsic/world/proto/collision_settings.proto";
import "intrinsic/world/proto/geometric_constraints.proto";

// Cartesian straight line constraint.
message LinearCartesianPathConstraint {}

message PathConstraint {
  // Local collision settings for the individual segments. If not defined,
  // segment will use the global collision settings if defined or the default
  // collision settings with zero margin if none are set.
  optional intrinsic_proto.world.CollisionSettings collision_settings = 1;
  // Defines a linear Cartesian path constraint, i.e., that a defined frame
  // will move linearly in Cartesian space. Cannot be combined with an enforce
  // kinematic configuration space interpolation constraint.
  optional LinearCartesianPathConstraint linear_path_constraint = 3;
  // Enforces interpolation in the kinematic configuration (i.e., joint) space.
  // If it is not possible to create a straight line in joint space due to
  // collision settings, the skill will return an error and not execute the
  // motion.
  optional bool enforce_configuration_space_interpolation = 4;
  optional
      intrinsic_proto.world.geometric_constraints.UniformGeometricConstraint
          uniform_geometric_constraint = 5;

  reserved "joint_position_limits";
  reserved 2;
}

message DynamicCartesianLimits {
  // Maximum Cartesian rotational velocity. If not
  // specified, the default value defined in the robot limits will be used.
  optional double max_rotational_velocity = 2
      [(intrinsic_proto.skills.skill_parameter_metadata).unit =
           "radians/second"];
  // Maximum Cartesian translational velocity. The value
  // defines the max translational velocity in the x, y, and z axis. If not
  // specified, the default value defined in the robot limits will be used.
  optional double max_translational_velocity = 3
      [(intrinsic_proto.skills.skill_parameter_metadata).unit =
           "meters/second"];
  // Maximum Cartesian rotational acceleration limits.
  // If not specified, the default value defined in the robot limits will be
  // used.
  optional double max_rotational_acceleration = 4
      [(intrinsic_proto.skills.skill_parameter_metadata).unit =
           "radians/second^2"];
  // Maximum Cartesian translational acceleration limits.
  // The value defines the max translational acceleration in the x, y,
  // and z axis. If not specified, the default value defined in the robot limits
  // will be used.
  optional double max_translational_acceleration = 5
      [(intrinsic_proto.skills.skill_parameter_metadata).unit =
           "meters/second^2"];
}
message JointLimitsUpdate {
  // Lower joint position limits allow to restrict the robot joint movement in
  // joint space. Each joint of the robot has lower (min) and upper (max)
  // limits. The specified limits need to be within the robot application
  // limits.
  optional intrinsic_proto.RepeatedDouble min_position = 1;
  // Upper joint position limits allow to restrict the robot joint movement in
  // joint space. Each joint of the robot has lower (min) and upper (max)
  // limits. The specified limits need to be within the robot application
  // limits.
  optional intrinsic_proto.RepeatedDouble max_position = 2;
  // Maximum joint velocity limits per joint. Units are in radians or degrees
  // per second. When not specified, the application limits of the robot will be
  // used.
  optional intrinsic_proto.RepeatedDouble max_velocity = 3;
  // Max joint acceleration limits per joint. Units are in radians or degrees
  // per second^2. When not specified, the acceleration limits from the robot
  // application limits will be used.
  optional intrinsic_proto.RepeatedDouble max_acceleration = 4;
  // Maximum joint jerk limits for the robot. Units are in radians or degrees
  // per second^3. When not specified, the jerk limits from the robot
  // application limits will be used.
  optional intrinsic_proto.RepeatedDouble max_jerk = 5;
}

// Blending parameters for Cartesian linear trajectory generation.
message CartesianBlendingParameters {
  // Cartesian radius of the circular blend around a Cartesian waypoint corner.
  optional double translation_corner_rounding = 1
      [(intrinsic_proto.skills.skill_parameter_metadata).unit = "meters"];
  // Radius of the circular blend around a waypoint corner (max angles-axis
  // deviation).
  optional double rotational_corner_rounding = 2
      [(intrinsic_proto.skills.skill_parameter_metadata).unit = "radians"];
}

// Single waypoints blending parameter that apply to all
// joint configuration way points.
message JointBlendingParameters {
  // Quantifies how closely the blend must pass by the joint configuration
  // waypoint. It can be interpreted as the coordinate-wise distance at which
  // the blending arc begins.
  optional double desired_tightness_rad = 1
      [(intrinsic_proto.skills.skill_parameter_metadata).unit = "radians"];
}
message BlendingParameters {
  optional CartesianBlendingParameters cartesian_blending = 1;
  optional JointBlendingParameters joint_blending = 2;
}

message MotionSegment {
  enum MotionType {
    ANY = 0;
    LINEAR = 1;
    JOINT = 2;
  }

  // The motion target of the segment defines the final robot configuration for
  // this segment. The target is defined as a set of constraints that can be
  // specified in terms of either joint position or Cartesian constraints like
  // a pose.
  intrinsic_proto.world.geometric_constraints.GeometricConstraint target = 5;
  // Allows setting the motion type. ANY is the default motion
  // type that enables arbitrary collision free paths in configuration space.
  // LINEAR enforces Cartesian linear trajectories. JOINT
  // enforces joint space interpolation.  A planning failure error will
  // be returned if a motion cannot be found of the given type.
  MotionType motion_type = 15;

  // Local collision settings for the individual segments. If not defined,
  // segment will use the global collision settings if defined or the default
  // collision settings with zero margin if none are set.
  optional intrinsic_proto.world.CollisionSettings collision_settings = 16;

  // Specifies geometric constraints that will be applied to the motion of the
  // robot. This will also add the constraint to the start and end configuration
  // of the robot.
  optional
      intrinsic_proto.world.geometric_constraints.UniformGeometricConstraint
          path_constraints = 3;

  // Robot joint limits that allow to update the lower and upper position
  // limits, velocity, acceleration, and
  // jerk for the motion segment. If not defined, the application limits of the
  // robot will be used.
  optional JointLimitsUpdate joint_limits = 17;
  // Cartesian limit constraints allow to restrict the Cartesian
  // velocity and acceleration of the robot motion. If not defined, the default
  // limits defined for the robot will be used for Cartesian linear motions and
  // unlimited limits will be used for all other motions. The limit constraints
  // apply to the origin of the moving frame defined in the motion target.
  optional intrinsic_proto.motion_planning.DynamicCartesianLimits
      cartesian_limits = 18;
  reserved "joint_position", "target_constraints", "limit_constraint";
  reserved 1, 2, 4;
}

message MotionSpecification {
  // The motion is divided into segments, where each motion segment defines a
  // single motion target as well as optional path and dynamic limit
  // constraints.
  // Note: Currently it is not possible to combine motion segments with linear
  // Cartesian motion requirements with those without linear Cartesian motion
  // requirement. We also do not currently support different joint limits for
  // different segments.
  repeated MotionSegment motion_segments = 1;

  // The curve waypoint fitting parameters that will be applied during
  // trajectory generation if multiple motion segments have been defined. Use
  // Cartesian blending parameter for linear Cartesian motion requests and joint
  // blending parameter otherwise.
  optional BlendingParameters curve_parameters = 3;
  reserved "collision_settings";
  reserved 2;
}
