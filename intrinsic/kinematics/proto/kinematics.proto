// Copyright 2023 Intrinsic Innovation LLC

syntax = "proto3";

package intrinsic_proto;

import "intrinsic/math/proto/matrix.proto";
import "intrinsic/math/proto/point.proto";
import "intrinsic/math/proto/pose.proto";

// A reflexion of intrinsic::kinematics::Element
message Element {
  // The id local to a kinematic skeleton
  uint32 id = 1;
  string name = 2;
  intrinsic_proto.Pose parent_t_this = 3;
  uint32 parent = 4;
  repeated uint32 children = 5;
}

// A reflexion of intrinsic::kinematics::CoordinateFrame
message CoordinateFrame {
  Element element = 1;
}

message LimitPair {
  double lower = 1;
  double upper = 2;
}

message Limits {
  LimitPair position = 1;
  double velocity = 2;
  double acceleration = 3;
  double jerk = 4;
  double effort = 5;
}

// A reflexion of intrinsic::kinematics::Joint
message Joint {
  enum Type {
    REVOLUTE = 0;
    PRISMATIC = 1;
    FIXED = 2;
  }

  message Parameters {
    message Dynamics {
      double static_friction = 1;
      double damping = 2;
    }

    Type type = 1;
    intrinsic_proto.Point axis = 2;

    Limits system_limits = 3;
    Limits soft_limits = 4;
    Dynamics dynamics = 5;
    double default_configuration = 6;
  }

  // Defines a joint dependency, which is used to compute a joint's 'derived'
  // value from a weighted (linear) combination of 'input' joint values.
  // Dependencies are defined as general form q_derived[i] =
  // alpha_self*q_input[i] + alpha[i-1]*q_input[i-1]+...+
  // alpha[i-k]*q_input[i-k]. By definition 'q_derived' is a minimal joint
  // coordinate (e.g. DH parameterization) usable in standard rigid body
  // kinematics algorithms. `alpha_self` is the scaling factor for the input
  // value of the joint's own DoF. Preceding joints, that the given joint
  // depends on, are termed 'leading' joints. Non-zero scaling factors for
  // leading joints, `alpha[i-k], are defined in the map `alpha_leading`, where
  // leading joints are keyed by their Element Ids.
  // Only fully actuated leading joints are supported, i.e. they must not be
  // dependent joints themselves.
  message LinearDependency {
    // Scaling factor for the actuation of the joint's own DoF.
    double alpha_self = 1;
    // Map from element id to scaling factor alpha for leading joints.
    map<uint32, double> alpha_leading = 2;
  }

  Element element = 1;
  Parameters parameters = 2;
  optional LinearDependency linear_dependency = 5;

  reserved 3, 4;
  reserved "value_function", "value_function_to_joint";
}

// A reflexion of intrinsic::kinematics::Link
message Link {
  message Parameters {
    double mass = 1;
    intrinsic_proto.Pose center_of_gravity = 2;
    Matrixd inertia = 3;
  }

  Element element = 1;
  Parameters parameters = 2;
}
