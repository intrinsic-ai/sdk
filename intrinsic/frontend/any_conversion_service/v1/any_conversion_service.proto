// Copyright 2023 Intrinsic Innovation LLC

syntax = "proto3";

package intrinsic_proto.any_conversion_service.v1;

import "google/protobuf/any.proto";
import "google/protobuf/descriptor.proto";

service AnyConversionService {
  // Encodes an Any proto to the specified encoding.
  rpc Encode(EncodeRequest) returns (EncodeResponse) {}

  // Decodes an Any proto from the specified encoding.
  rpc Decode(DecodeRequest) returns (DecodeResponse) {}
}

message DescriptorSource {
  oneof source {
    // Skill ID used to look up the file descriptor set in the skill registry.
    string skill_id = 1;

    // File descriptor set to use for resolving types.
    google.protobuf.FileDescriptorSet file_descriptor_set = 2;

    // Type URL used to look up the file descriptor set in the proto registry.
    // This is passed separately from the encoded any to avoid manually parsing
    // the proto string to get this data.
    // When encoding, if this value is set, it is enforced to be equal to the
    // type URL of the Any.
    string type_url = 3;
  }
}

enum Encoding {
  // Unspecified/default encoding is treated the same as `ENCODING_JSON`.
  ENCODING_UNSPECIFIED = 0;
  ENCODING_JSON = 1;
  ENCODING_TEXTPROTO = 2;
}

message EncodeRequest {
  // The Any proto to encode.
  google.protobuf.Any any = 1;

  // The descriptor source to use for resolving types.
  DescriptorSource descriptor_source = 2;

  // The encoding to use.
  Encoding encoding = 3;

  // Emit unpopulated fields. Only applicable for ENCODING_JSON.
  bool emit_unpopulated_fields = 4;
}

message EncodeResponse {
  // The encoded string representation of the Any proto.
  string encoded_any = 1;
}

message DecodeRequest {
  // The encoded string representation of the Any proto to code.
  string encoded_any = 1;

  // The descriptor source to use for resolving types.
  DescriptorSource descriptor_source = 2;

  // The encoding of the `encoded_any` string.
  Encoding encoding = 3;
}

message DecodeResponse {
  // The decoded Any proto.
  google.protobuf.Any any = 1;
}
