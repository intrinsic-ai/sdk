// Copyright 2023 Intrinsic Innovation LLC

syntax = "proto3";

package intrinsic_proto.solution.v1;

import "google/protobuf/empty.proto";
import "intrinsic/executive/proto/behavior_tree.proto";
import "intrinsic/frontend/solution_service/proto/status.proto";

// Manages the running solution.
service SolutionService {

  // Gets the status of the running solution.
  rpc GetStatus(GetStatusRequest) returns (Status);

  // Gets a single behavior tree from the running solution.
  rpc GetBehaviorTree(GetBehaviorTreeRequest)
      returns (intrinsic_proto.executive.BehaviorTree);

  // Gets multiple behavior trees from the running solution.
  rpc BatchGetBehaviorTrees(BatchGetBehaviorTreesRequest)
      returns (BatchGetBehaviorTreesResponse);

  // Lists behavior trees from the running solution.
  rpc ListBehaviorTrees(ListBehaviorTreesRequest)
      returns (ListBehaviorTreesResponse);

  // Creates a new behavior tree in the running solution.
  rpc CreateBehaviorTree(CreateBehaviorTreeRequest)
      returns (intrinsic_proto.executive.BehaviorTree);

  // Updates an existing behavior tree in the running solution.
  rpc UpdateBehaviorTree(UpdateBehaviorTreeRequest)
      returns (intrinsic_proto.executive.BehaviorTree);

  // Updates multiple behavior trees in the running solution.
  rpc BatchUpdateBehaviorTrees(BatchUpdateBehaviorTreesRequest)
      returns (BatchUpdateBehaviorTreesResponse);

  // Deletes a behavior tree in the running solution.
  rpc DeleteBehaviorTree(DeleteBehaviorTreeRequest)
      returns (google.protobuf.Empty);
}

enum BehaviorTreeView {
  // The default/unset value. The default depends on the RPC and is documented
  // individually where relevant.
  BEHAVIOR_TREE_VIEW_UNSPECIFIED = 0;

  // Include basic metadata about the behavior tree (`name` and `tree_id`). This
  // is the default view for `ListBehaviorTrees` and `BatchGetBehaviorTrees`.
  BEHAVIOR_TREE_VIEW_BASIC = 1;

  // Include the full contents of the behavior tree.
  BEHAVIOR_TREE_VIEW_FULL = 2;
}

message GetStatusRequest {
  // For future extensions.
}

message GetBehaviorTreeRequest {
  // The name of the behavior tree to retrieve.
  string name = 1;

  // The view of the behavior tree to return. Defaults to the FULL view.
  BehaviorTreeView view = 2;
}

message BatchGetBehaviorTreesRequest {
  // The names of the behavior trees to retrieve. A maximum of 50 behavior trees
  // can be retrieved in a batch.
  repeated string names = 1;

  // The view of the behavior tree to return. Defaults to the BASIC view.
  BehaviorTreeView view = 2;
}

message BatchGetBehaviorTreesResponse {
  // The behavior trees from the running solution. Uses the same order as the
  // names specified in the request.
  repeated intrinsic_proto.executive.BehaviorTree behavior_trees = 1;
}

message ListBehaviorTreesRequest {
  // The maximum number of behavior trees to return. The service may return
  // fewer than this value. If unspecified, at most 20 behavior trees will be
  // returned. The maximum value is 50; values above 50 will be coerced to 50.
  int32 page_size = 1;

  // Page token received from a previous call. Provide this to retrieve the
  // subsequent page.
  string page_token = 2;

  // The view of the behavior tree to return. Defaults to the BASIC view.
  BehaviorTreeView view = 3;
}

message ListBehaviorTreesResponse {
  // The behavior trees from the running solution. Behavior trees are returned
  // in alphabetical order (a-z) by name.
  repeated intrinsic_proto.executive.BehaviorTree behavior_trees = 1;

  // A token, which can be sent as `page_token` to retrieve the next page. If
  // this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message CreateBehaviorTreeRequest {
  // The ID (`name`) to use for the behavior tree. Must always be specified.
  // This is also sometimes called the "process name". The name must be unique
  // within the running solution and should ideally be meaningful to the user.
  string behavior_tree_id = 1;

  // The behavior tree to create. The `name` field will be ignored.
  intrinsic_proto.executive.BehaviorTree behavior_tree = 2;
}

message UpdateBehaviorTreeRequest {
  // The updated behavior tree. The `name` field is used to identify the
  // behavior tree to update.
  intrinsic_proto.executive.BehaviorTree behavior_tree = 1;

  // If set to `true`, a new behavior tree will be created if it does not exist.
  bool allow_missing = 2;
}

message BatchUpdateBehaviorTreesRequest {
  // The request message specifying the behavior trees to update. A maximum of
  // 50 behavior trees can be updated in a batch.
  repeated UpdateBehaviorTreeRequest requests = 1;
}

message BatchUpdateBehaviorTreesResponse {
  // The updated behavior trees.
  repeated intrinsic_proto.executive.BehaviorTree behavior_trees = 1;
}

message DeleteBehaviorTreeRequest {
  // The name of the behavior tree to delete.
  string name = 1;
}
